
#CS 101 Lab
#Program 8
#Ryan Lee
#rlhmb@umsystem.edu

'''Read in a datafile containing crime information for 2019.
Create functions to ask the user for a file, then use try exception so
if the read_in_file function throws an error you can loop and ask for
a file name again. It should then output the month that has the highest
crime rate and the offense that occurs the most. Afterwards, it should
ask for an offense then output a formatted report of the zip code and
how many times that offense occurs in that zip code using the dictionaries
from the functions given.'''

import csv

def month_from_number(x):
    months = ["[placeholder]", "January", "February", "March", "April", "May", "June", "July", "August", "September", "October", "November", "December"]

    if x < 1 or x > 12:
        raise ValueError("Month must be 1-12")
    else:
        for i in range(12):
            if x == i + 1:
                return months[i + 1]

def read_in_file(fileName):
    lst = []

    with open(fileName, encoding = "utf-8") as f:
        fcsv = csv.reader(f)

        for line in fcsv:
            lst.append(line)

    return(lst)

def create_reported_date_dict(inputList):
    dateList = []
    dateDict = {}

    for line in inputList:
        dateList.append(line[1])

    dateList.remove(dateList[0])

    for key in dateList:
        dateDict[key] = dateDict.get(key, 0) + 1
    
    return dateDict

def create_reported_month_dict(inputList):
    inputDict = create_reported_date_dict(inputList)
    x = inputDict.keys()
    monthDict = {}

    for keys in x:
        keys = str(keys)
        y = int(keys[0] + keys[1])
        
        try:
            monthDict[y] += 1
        except KeyError:
            monthDict[y] = 1

    return monthDict

def create_offense_dict(inputList):
    offenseList = []
    offenseDict = {}

    for line in inputList:
        offenseList.append(line[7])

    offenseList.remove(offenseList[0])

    for key in offenseList:
        offenseDict[key] = offenseDict.get(key, 0) + 1
    
    return offenseDict

def create_offense_by_zip(inputList):
    zipDict = {}

    for i, entry in enumerate(inputList):
        if i == 0:
            continue

        offense = entry[7]
        zip = entry[13]

        if not offense in zipDict:
            zipDict[offense] = {}
            zipDict[offense][zip] = 1
        else:
            if not zip in zipDict[offense]:
                zipDict[offense][zip] = 1
            else:
                zipDict[offense][zip] += 1

    return zipDict

def main():
    using = True

    while using == True:
        try:
            fileName = input('Enter the name of the crime data file ==> ')
            inputFile = read_in_file(fileName)
            using = False
        except FileNotFoundError:
            print("Could not find the file specified.", fileName, "not found")

    monthDict = create_reported_month_dict(inputFile)
    offenseDict = create_offense_dict(inputFile)
    numCrimes = 0
    monthCrimes = 0
    numOffense = 0
    offense = ''

    for key, value in monthDict.items():
        if value > numCrimes:
            numCrimes = value
            monthCrimes = key

    for key, value in offenseDict.items():
        if value > numOffense:
            numOffense = value
            offense = key

    print()

    strMonth = month_from_number(monthCrimes)

    print('The month with the highest # of crime is', strMonth, 'with', numCrimes, 'offenses')
    print('The offense with the highest # of crimes is', offense, 'with', numOffense, 'offenses')
    
    print()

    offenseName = input('Enter an offense: ')
    offenseName = offenseName.capitalize()

    while not offenseName in offenseDict:
        print('Not a valid offense found, please try again')
        offenseName = input('Enter an offense: ')


    offenseZip = create_offense_by_zip(inputFile)

    print(offenseName, 'offenses by Zip Code')
    print('{:<20}{:>10}'.format('Zip code', '# Offenses'))
    print("=" * 30)
    
    userDict = offenseZip[offenseName]

    for zip, value in userDict.items():
        print('{:<20}{:>10}'.format(zip, value))

if __name__ == "__main__":
    main()